import math 
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense,LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')


filename = "C:/Users/Stock_Price_Training_Data.xlsx"
stk_data = pd.read_excel(filename, sheet_name='Stock_Price_Training_Data')
data = pd.DataFrame(stk_data, columns=['Close'])

dataset = data.values

training_data_len = math.ceil(len(dataset)*0.1)

#scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

#Create the training set
#Create the scaled training dataset

train_data = scaled_data[0:training_data_len , :]
#Split the data into x_train an y_train datasets

x_train = [] 
y_train = [] 

for i in range(60,len(train_data)):
    x_train.append(train_data[i-60:i,0])
    y_train.append(train_data[i,0])
    if(i<=60):
        print(x_train)
        print(y_train)

#   Convert the x_train and y_tain to numpy arrays
x_train,y_train = np.array(x_train),np.array(y_train)     
#Reshape the data
x_train = np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))

#Build the LSTM model 

model = Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(x_train.shape[1],1)))
model.add(LSTM(50,return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#Compile the model
model.compile(optimizer='adam' , loss ='mean_squared_error')

#Train the model
model.fit(x_train,y_train,batch_size=1,epochs=1)

#Create the testing dataset
#Create a new array containg scaled values after 80%
test_data = scaled_data[training_data_len-60: , :]
#Create the datasets xtest and ytest
x_test = []
y_test = dataset[training_data_len: , :]

for i in range (60,len(test_data)):
    x_test.append(test_data[i-60:i,0])

#Convert the data to a numpy array
x_test=np.array(x_test)

#Reshape the data
x_test = np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))

#Get the models predicted price values
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

#get the root mean squared error 
rmse = np.sqrt(np.mean(predictions-y_test)**2)

#Plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions

#Visualize the data
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Train','Val','Predictions'],loc = 'lower right')
plt.show()

print(valid)